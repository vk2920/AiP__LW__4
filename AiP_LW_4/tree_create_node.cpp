#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#ifndef FILE
#include <stdio.h>
#endif

#ifndef system
#include <windows.h>
#endif

#ifndef worker
#include "tree_types.h"
#endif

#include "tree_create_node.h"

/// <summary>
/// Функция для создания информационного поля для элемента списка
/// Данные вводятся с клавиатуры
/// </summary>
/// <param name="d">Си-строка, содержащая сообщения для пользователя</param>
worker_data enter_node_data(const char* _d) {
    worker_data data;
    system("cls");
    if (_d) printf("%s", _d);
    printf("+------+----------------------------------+----------------------------------+------+\n|  ID  |          Фамилия  И. О.          |            Должность             | Год  |\n+------+----------------------------------+----------------------------------+------+\n");
    printf("| "); scanf("%d", &(data.id));
    while (getchar() != '\n'); system("cls");
    if (_d) printf("%s", _d);
    printf("+------+----------------------------------+----------------------------------+------+\n|  ID  |          Фамилия  И. О.          |            Должность             | Год  |\n+------+----------------------------------+----------------------------------+------+\n");
    printf("| %-4d | ", data.id); gets_s(data.fio, 64); system("cls");
    if (_d) printf("%s", _d);
    printf("+------+----------------------------------+----------------------------------+------+\n|  ID  |          Фамилия  И. О.          |            Должность             | Год  |\n+------+----------------------------------+----------------------------------+------+\n");
    printf("| %-4d | %-32s | ", data.id, data.fio); gets_s(data.job, 64); system("cls");
    if (_d) printf("%s", _d);
    printf("+------+----------------------------------+----------------------------------+------+\n|  ID  |          Фамилия  И. О.          |            Должность             | Год  |\n+------+----------------------------------+----------------------------------+------+\n");
    printf("| %-4d | %-32s | %-32s | ", data.id, data.fio, data.job); scanf("%d", &(data.year));
    while (getchar() != '\n'); system("cls");
    if (_d) printf("%s", _d);
    printf("+------+----------------------------------+----------------------------------+------+\n|  ID  |          Фамилия  И. О.          |            Должность             | Год  |\n+------+----------------------------------+----------------------------------+------+\n");
    printf("| %-4d | %-32s | %-32s | %4d |\n", data.id, data.fio, data.job, data.year);
    printf("+------+----------------------------------+----------------------------------+------+\n"
        "Проверьте правильность введённых данных и нажмите ENTER / RETURN (в случае ошибки -- ESC) ");
    while (1) {
        int k = _getch();
        if (k == 13) return data;
        else if (k == 27) {
            system("cls");
            return enter_node_data("Вводим заново\n\n");
        }
    }
}

/// <summary>
/// Создаёт элемент списка
/// </summary>
/// <param name="data">Информационное поле для элемента</param>
/// <returns>Указатель на элемент списка или NULL, если элемент не создан</returns>
worker* create_node(worker_data _data) {
    // Создадим новый элемент
    worker* _node = (worker*)malloc(sizeof(worker));

    // Если не получилось выделить память, вернём нулевой указатель
    if (!_node) return NULL;

    // Если память выделена, то загоним информационное поле элемента
    _node->d = _data;

    // И установим указатели на соседние элементы
    _node->p = NULL;
    _node->l = NULL;
    _node->r = NULL;

    // Вернём указатель на созданный элемент списка
    return _node;
}